import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import { useEffect, useState } from 'react'
import styles from '@/styles/Home.module.css'
import PulseLoader from "react-spinners/PulseLoader";
import Option from '@/components/Option'
import { SuggstionInterface } from '@/utils/interfaces'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [input, setInput] = useState('')
  const [error, setError] = useState(false)
  const [suggstion, setSuggstion] = useState({
    header:'',
    article:''
  })
  const [headerOption,setHeaderOption]=useState({
    label:'Add Header',
    result:false
  })
  const [imagesOption,setImagesOption]=useState({
    label:'Add Images',
    result:false
  })
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (input.length <= 50) setError(false)
  }, [input])

  const submit = async () => {
    //Check if charcter limit is exceeded
    if (input.length > 50) setError(true)

    setLoading(true)
    try {
      const res = await fetch('/api/article', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ input,headerOption })

      })
      const suggstion = await res.json()
      setSuggstion({...suggstion})
    } catch (error) {
      console.log(error);

    } finally {
      setLoading(false)
    }
  }

  const getHeader=(suggstionObject:SuggstionInterface)=>{
    if(suggstionObject.header!==undefined){
      const header=suggstionObject.header
      const article=suggstionObject.article
      return (
        <div>
          <h2 className='py-2 font-bold text-lg'>{header}</h2>
          <p className='text-sm text-gray-700 '>
            {article}  
          </p>
        </div>
      )
    }else{
      return(<p className='text-sm text-gray-700 '>
              {suggstionObject.article}  
            </p>
            )
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Quick Write</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="max-w-7xl mx-auto py-12">
        <h2 className="text-2xl font-bold text-center pb-2">
          Article Generartor
        </h2>
        <div className="flex flex-col gap-4 justify-center w-1/3 mx-auto">
          <div className="relative w-full">
            {error && (
              <p className='text-red-500 pt-1 text-sm'>
                Character limit exceeded,enter less text
              </p>
            )}
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              rows={3}
              className="w-full border-2 border-gray-300 bg-white 
            p-4 rounded-lg text-sm focus:outline-none resize-none"
              placeholder="Enter your Article Idea here"
            />
            <div className={input.length > 50 ?
              "absolute bottom-2 right-2 text-red-400 text-xs"
              : "absolute bottom-2 right-2 text-gray-400 text-xs"}>
              <span>{input.length}</span>/50
            </div>
          </div>
          <div className='flex flex-row gap-4  mx-auto' >
          <Option label={headerOption.label} result={headerOption.result} onChangeFunction={setHeaderOption}/>
          <Option label={imagesOption.label} result={imagesOption.result} onChangeFunction={setImagesOption}/>
 
          </div>

          <button type='button' className="bg-blue-500 hover:bg-blue-700 text-white 
          font-bold py-2 px-4 rounded" onClick={submit}>
            {loading ? <span>Loading {' '}
              <PulseLoader color='#fff' size={8} />
            </span> : 'Generate'}</button>

          {suggstion.article !== '' && (<div className='mt-12 '>
            <h4 className='text-lg font-semibold py'>Your Generated Article:</h4>
            <div className="relative w-full rounded-md bg-gray-100 p-4">

            
                {getHeader(suggstion)}
             
            </div>
          </div>)
          }
        </div>
      </div>


    </div>
  )
}
